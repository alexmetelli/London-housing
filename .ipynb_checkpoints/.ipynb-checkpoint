{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "from rightmove_webscraper import RightmoveData\n",
    "from geopy.geocoders import Nominatim\n",
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://www.rightmove.co.uk/property-for-sale/find.html?locationIdentifier=REGION%5E85448&sortType=6&propertyTypes=&includeSSTC=false&mustHave=&dontShow=&furnishTypes=&keywords='\n",
    "rm = RightmoveData(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>type</th>\n",
       "      <th>address</th>\n",
       "      <th>url</th>\n",
       "      <th>agent_url</th>\n",
       "      <th>postcode</th>\n",
       "      <th>number_bedrooms</th>\n",
       "      <th>search_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>765000.0</td>\n",
       "      <td>1 bedroom flat for sale</td>\n",
       "      <td>Lancaster Road, W11</td>\n",
       "      <td>http://www.rightmove.co.uk/property-for-sale/p...</td>\n",
       "      <td>http://www.rightmove.co.uk/estate-agents/agent...</td>\n",
       "      <td>W11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-08-04 22:34:10.471739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>675000.0</td>\n",
       "      <td>2 bedroom flat for sale</td>\n",
       "      <td>Great Western Road, Notting Hill, London, W11</td>\n",
       "      <td>http://www.rightmove.co.uk/property-for-sale/p...</td>\n",
       "      <td>http://www.rightmove.co.uk/estate-agents/agent...</td>\n",
       "      <td>W11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-08-04 22:34:10.471739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>675000.0</td>\n",
       "      <td>1 bedroom apartment for sale</td>\n",
       "      <td>Pinehurst Court, 1-3 Colville Gardens, London,...</td>\n",
       "      <td>http://www.rightmove.co.uk/property-for-sale/p...</td>\n",
       "      <td>http://www.rightmove.co.uk/estate-agents/agent...</td>\n",
       "      <td>W11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-08-04 22:34:10.471739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750000.0</td>\n",
       "      <td>2 bedroom apartment for sale</td>\n",
       "      <td>Kensington House 157-159 Notting Hill Gate, Ke...</td>\n",
       "      <td>http://www.rightmove.co.uk/property-for-sale/p...</td>\n",
       "      <td>http://www.rightmove.co.uk/estate-agents/agent...</td>\n",
       "      <td>W11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-08-04 22:34:10.471739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>695000.0</td>\n",
       "      <td>2 bedroom maisonette for sale</td>\n",
       "      <td>St. Ervans Road, London, W10</td>\n",
       "      <td>http://www.rightmove.co.uk/property-for-sale/p...</td>\n",
       "      <td>http://www.rightmove.co.uk/estate-agents/agent...</td>\n",
       "      <td>W10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2020-08-04 22:34:10.471739</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      price                           type  \\\n",
       "0  765000.0        1 bedroom flat for sale   \n",
       "1  675000.0        2 bedroom flat for sale   \n",
       "2  675000.0   1 bedroom apartment for sale   \n",
       "3  750000.0   2 bedroom apartment for sale   \n",
       "4  695000.0  2 bedroom maisonette for sale   \n",
       "\n",
       "                                             address  \\\n",
       "0                                Lancaster Road, W11   \n",
       "1      Great Western Road, Notting Hill, London, W11   \n",
       "2  Pinehurst Court, 1-3 Colville Gardens, London,...   \n",
       "3  Kensington House 157-159 Notting Hill Gate, Ke...   \n",
       "4                       St. Ervans Road, London, W10   \n",
       "\n",
       "                                                 url  \\\n",
       "0  http://www.rightmove.co.uk/property-for-sale/p...   \n",
       "1  http://www.rightmove.co.uk/property-for-sale/p...   \n",
       "2  http://www.rightmove.co.uk/property-for-sale/p...   \n",
       "3  http://www.rightmove.co.uk/property-for-sale/p...   \n",
       "4  http://www.rightmove.co.uk/property-for-sale/p...   \n",
       "\n",
       "                                           agent_url postcode  \\\n",
       "0  http://www.rightmove.co.uk/estate-agents/agent...      W11   \n",
       "1  http://www.rightmove.co.uk/estate-agents/agent...      W11   \n",
       "2  http://www.rightmove.co.uk/estate-agents/agent...      W11   \n",
       "3  http://www.rightmove.co.uk/estate-agents/agent...      W11   \n",
       "4  http://www.rightmove.co.uk/estate-agents/agent...      W10   \n",
       "\n",
       "   number_bedrooms                search_date  \n",
       "0              1.0 2020-08-04 22:34:10.471739  \n",
       "1              2.0 2020-08-04 22:34:10.471739  \n",
       "2              1.0 2020-08-04 22:34:10.471739  \n",
       "3              2.0 2020-08-04 22:34:10.471739  \n",
       "4              2.0 2020-08-04 22:34:10.471739  "
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = rm.get_results\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "from geopy.extra.rate_limiter import RateLimiter\n",
    "geolocator = Nominatim(user_agent=\"alex\")\n",
    "geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)\n",
    "df['location'] = df['address'].apply(geocode)\n",
    "df['point'] = df['location'].apply(lambda loc: tuple(loc.point) if loc else None)\n",
    "df[['latitude', 'longitude', 'altitude']] = pd.DataFrame(df['point'].tolist(), index=df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['type' 'address' 'url' 'agent_url' 'search_date' 'location' 'altitude'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-193-cd602eb50e2e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdropCols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'type'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'address'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'url'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'agent_url'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'search_date'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'location'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'altitude'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdropCols\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3995\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3996\u001b[0m             \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3997\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3998\u001b[0m         )\n\u001b[1;32m   3999\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3934\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3935\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3936\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3937\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3938\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   3968\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3969\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3970\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3971\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3972\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   5015\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5016\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5017\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5018\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5019\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['type' 'address' 'url' 'agent_url' 'search_date' 'location' 'altitude'] not found in axis\""
     ]
    }
   ],
   "source": [
    "dropCols = ['type', 'address', 'url', 'agent_url', 'search_date', 'location', 'altitude']\n",
    "df = df.drop(dropCols, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>postcode</th>\n",
       "      <th>number_bedrooms</th>\n",
       "      <th>point</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>765000.0</td>\n",
       "      <td>W11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(51.5180568, -0.2040312, 0.0)</td>\n",
       "      <td>51.518057</td>\n",
       "      <td>-0.204031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>675000.0</td>\n",
       "      <td>W11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>(51.518327, -0.1992217, 0.0)</td>\n",
       "      <td>51.518327</td>\n",
       "      <td>-0.199222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>675000.0</td>\n",
       "      <td>W11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(51.5157041, -0.20290847721463395, 0.0)</td>\n",
       "      <td>51.515704</td>\n",
       "      <td>-0.202908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>695000.0</td>\n",
       "      <td>W10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>(51.522517, -0.2071645, 0.0)</td>\n",
       "      <td>51.522517</td>\n",
       "      <td>-0.207165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>675000.0</td>\n",
       "      <td>W11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(51.5157041, -0.20290847721463395, 0.0)</td>\n",
       "      <td>51.515704</td>\n",
       "      <td>-0.202908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      price postcode  number_bedrooms  \\\n",
       "0  765000.0      W11              1.0   \n",
       "1  675000.0      W11              2.0   \n",
       "2  675000.0      W11              1.0   \n",
       "4  695000.0      W10              2.0   \n",
       "6  675000.0      W11              1.0   \n",
       "\n",
       "                                     point   latitude  longitude  \n",
       "0            (51.5180568, -0.2040312, 0.0)  51.518057  -0.204031  \n",
       "1             (51.518327, -0.1992217, 0.0)  51.518327  -0.199222  \n",
       "2  (51.5157041, -0.20290847721463395, 0.0)  51.515704  -0.202908  \n",
       "4             (51.522517, -0.2071645, 0.0)  51.522517  -0.207165  \n",
       "6  (51.5157041, -0.20290847721463395, 0.0)  51.515704  -0.202908  "
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.dropna()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('/home/alex/Documents/London Housing/one.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_coord = df['point'].str.split(', ', expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "coords = df['point'].apply(pd.Series)\n",
    "coords = coords.drop([2], axis=1)\n",
    "coords.columns=['latitude', 'logitude']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "coords_drop = coords.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(436, 2)"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coords_drop.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([df,coords], axis=1, sort=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.drop(['type', 'url', 'agent_url', 'search_date', 'location', 'point'], axis=1)\n",
    "data = data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(361, 6)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "from geopy import distance\n",
    "station = (51.5173, -0.2103)\n",
    "#data['Dist from Tube'] = distance.distance(points, station).km"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 51.3027132 ,  51.31279562,  51.3153525 ,  51.31279562,\n",
       "        51.3098116 ,  51.3069717 ,  51.3067564 ,  51.311471  ,\n",
       "        51.311471  ,  51.2989388 ,  51.3088284 ,  51.3119188 ,\n",
       "        51.30682   ,  51.3204614 ,  51.31498637,  51.3117081 ,\n",
       "        51.299059  ,  51.3140256 ,  51.3017956 ,  51.3091744 ,\n",
       "        51.3233861 ,  51.2956876 ,  51.3125791 ,  51.3138561 ,\n",
       "        51.3209313 ,  51.3069717 ,  51.2911563 ,  51.3175975 ,\n",
       "        51.3204614 ,  51.299059  ,  51.3079107 ,  51.311143  ,\n",
       "        51.3049942 ,  51.3089029 ,  51.31091231,  51.2943454 ,\n",
       "        51.3188185 ,  51.2943454 ,  51.3021283 ,  51.31309   ,\n",
       "        51.3088284 ,  51.3067662 ,  51.2943454 ,  51.298967  ,\n",
       "        51.3164423 ,  51.3121992 ,  51.2969155 ,  51.3141073 ,\n",
       "        51.29549075,  51.2988061 ,  51.2943454 ,  51.3021283 ,\n",
       "        51.2993625 ,  51.3141251 ,  51.2997449 ,  51.3026429 ,\n",
       "        51.3026429 ,  51.3015253 ,  51.31091231,  51.2932723 ,\n",
       "        51.3164423 ,  51.3026429 ,  51.3142117 ,  51.3102597 ,\n",
       "        51.2970571 ,  51.3009813 ,  51.3100324 ,  51.3026429 ,\n",
       "        51.3107945 ,  51.29549075,  51.3141073 ,  51.3107945 ,\n",
       "        51.3102597 ,  51.3088284 ,  51.31091231,  51.30682   ,\n",
       "        51.3209313 ,  51.3138561 ,  51.3026429 ,  51.3133886 ,\n",
       "        51.3026429 ,  51.3039103 ,  51.3027132 ,  51.2993312 ,\n",
       "        51.3089029 ,  51.3027132 ,  51.3039103 ,  51.2952749 ,\n",
       "        51.2952749 ,  51.3055827 ,  51.3188185 ,  51.305796  ,\n",
       "        51.305796  ,  51.3026429 ,  51.3209313 ,  51.3026163 ,\n",
       "        51.29758262,  51.3233861 ,  51.3138561 ,  51.311471  ,\n",
       "        51.3138038 ,  51.3119188 ,  51.305878  ,  51.30891962,\n",
       "        51.2993312 ,  51.2989388 ,  51.305796  ,  51.30821183,\n",
       "        51.305796  ,  51.3138038 ,  51.2956876 ,  51.3026429 ,\n",
       "        51.3160033 ,  51.3079943 ,  51.3088284 ,  51.2915983 ,\n",
       "        51.3026429 ,  51.5952597 ,  51.3158969 ,  51.3064086 ,\n",
       "        51.3275567 ,  51.3275567 ,  51.30682   ,  51.3157698 ,\n",
       "        51.3017956 ,  51.30682   ,  51.3039103 ,  51.3079943 ,\n",
       "        51.3039103 ,  51.3134658 ,  51.3138561 ,  51.3061046 ,\n",
       "        51.295284  ,  51.3079943 ,  51.2965951 ,  51.3089029 ,\n",
       "        51.3141251 ,  51.3027132 ,  51.3120963 ,  51.29474184,\n",
       "        51.2952749 ,  51.3055827 ,  51.3141251 ,  51.3168364 ,\n",
       "        51.317411  ,  51.3157698 ,  51.2965951 ,  51.3136914 ,\n",
       "        51.317411  ,  51.3108112 ,  51.3009813 ,  51.3134658 ,\n",
       "        51.3021283 ,  51.2953507 ,  51.29474184,  51.3176704 ,\n",
       "        51.3100324 ,  51.3146397 ,  51.3021283 ,  51.3039103 ,\n",
       "        51.29758262,  51.3136051 ,  51.3039103 ,  51.295284  ,\n",
       "        51.3114231 ,  51.3139547 ,  51.3098116 ,  51.30682   ,\n",
       "        51.3204614 ,  51.3168364 ,  51.3124514 ,  51.2991424 ,\n",
       "        51.3015253 ,  51.2956876 ,  51.3142976 ,  51.2956876 ,\n",
       "        51.3210825 ,  51.3017956 ,  51.3168364 ,  51.3088284 ,\n",
       "        51.3108112 ,  51.291895  ,  51.3102597 ,  51.3079107 ,\n",
       "        51.3113607 ,  51.3176704 ,  51.3089029 ,  51.305796  ,\n",
       "        51.3088284 ,  51.3136914 ,  51.3114231 ,  51.3021283 ,\n",
       "        51.3125521 ,  51.3134658 ,  51.3021283 ,  51.3015253 ,\n",
       "        51.305878  ,  51.2985584 ,  51.2932723 ,  51.3091744 ,\n",
       "        51.3100324 ,  51.3119188 ,  51.305878  ,  51.3117361 ,\n",
       "        51.3062602 ,  51.3021283 , -40.8270524 ,  51.3102597 ,\n",
       "        51.3053707 ,  51.2957466 ,  51.3017956 ,  51.3209313 ,\n",
       "        51.2952749 ,  51.3039103 ,  51.3079252 ,  51.2943454 ,\n",
       "        51.3088284 ,  51.3023047 ,  51.3100324 ,  51.311471  ,\n",
       "        51.3174096 ,  51.31147925,  51.3119891 ,  51.3064086 ,\n",
       "        51.3275567 ,  51.314416  ,  51.3021851 ,  51.3091744 ,\n",
       "        51.29609866,  51.2930405 ,  51.3042234 ,  51.2895034 ,\n",
       "        51.2932723 ,  51.3039103 ,  51.3027132 ,  51.3175975 ,\n",
       "        51.3017956 ,  51.3202641 ,  51.3175975 ,  51.3120963 ,\n",
       "        51.3175975 ,  51.3091744 ,  51.3055827 ,  51.3055827 ,\n",
       "        51.3133886 ,  51.2895034 ,  51.2962174 ,  51.3119188 ,\n",
       "        51.3098116 ,  51.3114701 ,  51.311471  ,  51.2997449 ,\n",
       "        51.3021283 ,  51.3021283 ,  51.3120963 ,  52.80078556,\n",
       "        51.3079943 ,  51.3079943 ,  51.3175975 ,  51.3031136 ,\n",
       "        51.3120963 ,  51.2916235 ,  51.3142117 ,  51.313119  ,\n",
       "        51.31091231,  51.2930405 ,  51.30821671,  51.3026163 ,\n",
       "        51.3009813 ,  51.3124514 ,  51.30821671,  51.2975362 ,\n",
       "        51.3017956 ,  51.31915115,  51.3133886 ,  51.3091744 ,\n",
       "        51.3175975 ,  51.3055827 ,  51.3120963 ,  51.2997449 ,\n",
       "        51.3101227 ,  51.3101227 ,  51.3101227 ,  51.2943454 ,\n",
       "        51.3055827 ,  51.3017956 ,  51.3091744 ,  51.3164423 ,\n",
       "        51.3164423 ,  51.3164423 ,  51.297799  ,  51.31685192,\n",
       "        51.3119408 ,  51.3188185 ,  51.3209313 , -37.4062478 ,\n",
       "       -45.8789159 ,  51.3064086 ,  51.2967806 ,  51.3141073 ,\n",
       "        51.2952749 ,  51.3125791 ,  51.3124514 ,  51.3099123 ,\n",
       "        51.3150721 ,  51.3049942 ,  51.3100324 ,  51.2953507 ,\n",
       "        51.3138561 ,  51.314416  ,  51.3079943 ,  51.3067564 ,\n",
       "        51.2969155 ,  51.2952749 ,  51.3131828 ,  51.3131828 ,\n",
       "        51.3141073 ,  51.305878  ,  51.3157698 ,  51.311143  ,\n",
       "        51.2926467 ,  51.3101227 ,  51.2962174 ,  51.2962174 ,\n",
       "        51.3119891 ,  51.3131828 ,  51.3026429 ,  51.3150721 ,\n",
       "        51.3079943 ,  51.3150577 ,  51.3180297 ,  51.5952597 ,\n",
       "        51.3017956 ,  51.3026429 ,  51.3091744 ,  51.294839  ,\n",
       "        51.29046637,  51.2993312 ,  51.3021283 ,  51.291895  ,\n",
       "        51.291895  ,  51.3042234 ,  51.3089029 ,  51.34050066,\n",
       "        51.3100324 ,  51.3141179 ,  51.3091744 ,  51.2997449 ,\n",
       "        51.3275567 ,  51.3055827 ,  51.3079943 ,  51.3067564 ,\n",
       "        51.3165876 ,  51.3209313 ,  51.3091744 ,  51.3209313 ,\n",
       "        51.3055827 ,  51.3069717 ,  51.3080407 ,  51.3165876 ,\n",
       "        51.31183688])"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "points = (data['latitude'].values + data['logitude'].values)\n",
    "points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.54293964538524\n"
     ]
    }
   ],
   "source": [
    "print(distance.distance(station, point).km)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f11e4a80f10>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot(kind='scatter', x='logitude', y='latitude')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     -0.214617\n",
       "1     -0.202908\n",
       "3     -0.207165\n",
       "5     -0.202908\n",
       "6     -0.210555\n",
       "         ...   \n",
       "544   -0.205179\n",
       "545   -0.211131\n",
       "547   -0.201431\n",
       "549   -0.200882\n",
       "552   -0.214210\n",
       "Name: logitude, Length: 361, dtype: float64"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['logitude']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
